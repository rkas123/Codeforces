#include<bits/stdc++.h>
#define int long long
#define uint unsigned long long
#define in(x) int x;cin>>x
#define w(t) int t; cin>> t; while(t--)
#define Map unordered_map
#define inf 1e18
#define endl "\n"
#define MOD 1000000007
#define L 2*I+1
#define R 2*I+2
const double pi = 3.14159265358979323846;
using namespace std;
int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans*=(temp);
        temp*=temp;
        b>>=1;
    }
    return ans;

}
int GCD(int a,int b)
{
    if(a==0)
        return b;
    return GCD(b%a,a);
}
int Hash(int i, int j)
{
    return (100*i) +j; 
}
bool BFS(int src, map<int,vector<int>> m, map<int,bool> & visited, map<int,int> &parent)
{
    visited[src]=true;
    for(vector<int>::iterator it=m[src].begin();it!=m[src].end();it++)
    {
        if(*it != parent[src] && visited[*it])
            return true;
        if(!visited[*it])
        {
            parent[*it]=src;
            if(BFS(*it, m, visited,parent))
                return true;
        }
    }
    return false;
}
bool iscycle(map<int,vector<int>> m)
{
    map<int,bool> visited;
    map<int,int> parent;
    for(map<int,vector<int>> :: iterator it= m.begin();it!=m.end();it++)
    {
        if(!visited[it->first])
        {
            parent[it->first]=it->first;
            if(BFS(it->first, m,visited,parent))
                return true;
        }
    }
    return false;
}
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE 
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    in(r);
    in(c);
    string s[r];
    for(int i=0;i<r;i++)
        cin>>s[i];
    map<int,vector<int>> m;
    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            if(i<r-1)
            {
                if(s[i][j] == s[i+1][j])
                {
                    m[Hash(i,j)].push_back(Hash(i+1,j));
                    m[Hash(i+1,j)].push_back(Hash(i,j));
                }
            }
            if(j<c-1)
            {
                if(s[i][j] == s[i][j+1])
                {
                    m[Hash(i,j)].push_back(Hash(i,j+1));
                    m[Hash(i,j+1)].push_back(Hash(i,j));
                }
            }
        }
    }
    if(iscycle(m))
        cout<<"Yes"<<endl;
    else
        cout<<"No"<<endl;


    return 0;
}
