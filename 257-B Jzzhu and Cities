class c{
public:
	int node,dist;
	bool train;
	c(int a,int b,bool c)
	{
		node=a;dist=b;train=c;
	}
};
class compare{
public:
	bool operator () (c A,c B)
	{
		if(A.dist != B.dist)
		{
			return A.dist > B.dist;
		}
		if(A.train)
			return true;
		return false;
	}
};
int32_t main()
{
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL);
    // #ifndef ONLINE_JUDGE
    //   freopen("input.txt", "r", stdin);
    //   freopen("output.txt", "w", stdout);
    // #endif
	int n,m,k;
	cin>>n>>m>>k;
	vector<pll> adjlist[n+1];
	bool vis[n+1];
	int dist[n+1];
	int train[n+1];
	for(int i=1;i<=n;i++)
	{
		vis[i]=false;
		dist[i]=inf;
		train[i]=inf;
	}
	for(int i=0;i<m;i++)
	{
		in(u);in(v);in(x);
		adjlist[u].pb({v,x});
		adjlist[v].pb({u,x});
	}
	for(int i=0;i<k;i++)
	{
		in(s);in(x);
		train[s]=min(train[s],x);
	}
	priority_queue<c,vector<c>,compare> pq;
	for(int i=1;i<=n;i++)
	{
		if(train[i]!=inf)
		{
			c edge(i,train[i],true);
			pq.push(edge);
		}
	}
	vis[1]=true;
	for(auto it: adjlist[1])
	{
		c edge(it.F,it.S,false);
		pq.push(edge);
	}
	int trainused=0;
	//cout<<"order"<<endl;
	while(!pq.empty())
	{
		c front = pq.top();
		pq.pop();
		if(vis[front.node])
			continue;
		//cout<<front.node<<" ";
		vis[front.node]=true;
		dist[front.node]=front.dist;
		if(front.train){
			//cout<<"train node "<<front.node<<endl;
			trainused++;
		}
		for(auto it: adjlist[front.node])
		{
			if(!vis[it.F] && dist[it.F] > dist[front.node] + it.S)
			{
				dist[it.F] = dist[front.node] + it.S;
				c edge(it.F,dist[it.F],false);
				pq.push(edge);
			}
		}
	}
	cout<<k-trainused<<endl;
    return 0;
}
