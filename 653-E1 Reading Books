#include<bits/stdc++.h>
#define int long long
#define uint unsigned long long
#define in(x) int x;cin>>x;
#define w(t) int t; cin>> t; while(t--)
#define Map unordered_map
#define inf 1e18;
#define f(i,s,e) for(int i=s;i<e;i++)
#define MOD 1000000007
const double pi = 3.14159265358979323846;
using namespace std;
int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans*=(temp);
        temp*=temp;
        b>>=1;
    }
    return ans;

}
int GCD(int a,int b)
{
    if(a==0)
        return b;
    return GCD(b%a,a);
}
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE 
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    in(n);in(k);
    vector<int> A;
    vector<int> B;
    vector<int> C;
    for(int i=0;i<n;i++)
    {
        in(t);
        in(a);in(b);
        if(a==1 && b==1)
        {
            C.push_back(t);
        }
        else if(a==1)
        {
            A.push_back(t);
        }
        else if(b==1)
        {
            B.push_back(t);
        }
    }
    sort(A.begin(),A.end());
    sort(B.begin(),B.end());
    sort(C.begin(),C.end());
    int a=0;int b=0;
    int times=0;
    vector<int>::iterator it1=A.begin();
    vector<int>::iterator it2=B.begin();
    vector<int>::iterator it3=C.begin();
    int acount=0,bcount=0;
    while(it3!=C.end())
    {

        int x,y,z;
        z=*it3;
        if(it1==A.end()){
            x=inf;
        }
        else
            x=*it1;

        if(it2==B.end()){
            y=inf;
        }
        else
            y=*it2;
        if(z<=(x+y))
        {
            
            times+=(*it3);
            it3++;
            acount++;
            bcount++;
        }
        else
        {
            acount++;
            bcount++;
            times+=(*it1 + *it2);
            it1++;it2++;
        }
        if(acount==k)
            break;
    }
        if(acount<k)
        {
            while(it1!=A.end())
            {
                times+=(*it1);
                it1++;
                acount++;
                if(acount==k)
                    break;
            }
        }
        if(bcount<k)
        {
            while(it2!=B.end())
            {
                times+=(*it2);
                it2++;
                bcount++;
                if(bcount==k)
                    break;
            }
        }
        if(acount<k || bcount<k)
        {
            cout<<"-1"<<endl;
        }
        else
            cout<<times<<endl;
    


    return 0;
}
