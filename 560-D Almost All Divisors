#include<bits/stdc++.h>
#define int long long
#define uint unsigned long long
#define in(x) int x;cin>>x;
#define w(t) int t; cin>> t; while(t--)
#define Map unordered_map
#define inf 1e18;
#define f(i,s,e) for(int i=s;i<e;i++)
#define MOD 1000000007
const double pi = 3.14159265358979323846;
using namespace std;
int fastexp(int a,int b)
{
    int answer=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            answer*=(temp);
        temp*=temp;
        b>>=1;
    }
    return answer;

}
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE 
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    w(t)
    {
        in(n);
        int*A=new int[n];
        for(int i=0;i<n;i++)
            cin>>A[i];
        sort(A,A+n);
        bool flag=true;
        int answer=A[0]*A[n-1];
        int i=1;
        int j=n-2;
        while(i<=j)
        {
            int temp=A[i]*A[j];
            //cout<<temp<<endl;
            i++;j--;
            if(temp!=answer)
                flag=false;
        }
        if(!flag){
            cout<<"-1"<<endl;
            continue;
        }
        else
        {
            vector<int> factors;
            for(int j=2;j*j<=answer;j++)
            {
                if(answer%j==0)
                {
                    factors.push_back(j);
                        if(j!=answer/j)
                    factors.push_back(answer/j);
                }
            }
            sort(factors.begin(),factors.end());
            
            if(n!=factors.size()){
                cout<<"-1"<<endl;
                continue;
            }
            
                for(int i=0;i<n;i++)
                {
                    if(A[i]!=factors[i])
                    {
                        flag=false;
                        break;
                    }
                }
                if(!flag)
                    cout<<"-1"<<endl;
                else
                    cout<<answer<<endl;
            
        }
    }

    return 0;
}
